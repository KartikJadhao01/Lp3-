!pip install tensorflow

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam


# Load dataset
try:
    data = pd.read_csv('Churn_Modelling.csv')
    print("Dataset loaded successfully.")
except FileNotFoundError:
    print("Dataset not found. Make sure 'Churn_Modelling.csv' is in the current directory.")
       
# Display initial dataset information
print("\nInitial Dataset Information:")
print(data.head())
print(data.info())

# Dropping unnecessary columns
data = data.drop(columns=['RowNumber', 'CustomerId', 'Surname'])

# Encoding categorical columns 'Geography' and 'Gender'
data['Geography'] = LabelEncoder().fit_transform(data['Geography'])
data['Gender'] = LabelEncoder().fit_transform(data['Gender'])

# Separate features and target variable
X = data.drop(columns=['Exited']) # Features
y = data['Exited'] # Target (0 = Not Exited, 1 = Exited)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the feature sets
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build a simple neural network model
model = Sequential([
 Dense(64, input_dim=X_train.shape[1], activation='relu'),
 Dense(32, activation='relu'),
 Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
print("\nTraining the model...")
history = model.fit(X_train, y_train, epochs=30, batch_size=32, validation_split=0.1, verbose=1)

# Predict and evaluate the model on the test set
y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype("int32")

# Calculate accuracy and confusion matrix
accuracy = accuracy_score(y_test, y_pred_classes)
conf_matrix = confusion_matrix(y_test, y_pred_classes)
print("\nModel Performance:")
print(f"Accuracy: {accuracy:.3f}")
print("Confusion Matrix:\n", conf_matrix)