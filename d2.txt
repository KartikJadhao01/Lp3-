# Write a program to solve a fractional Knapsack problem using a greedy method. 

# Item class to store weight, value, and value-to-weight ratio
class Item:
    def __init__(self, value, weight):
        self.value = value
        self.weight = weight
        self.ratio = value / weight

# Function to calculate maximum value in knapsack using greedy approach
def fractional_knapsack(capacity, items):
    # Sort items by their value-to-weight ratio in descending order
    items.sort(key=lambda item: item.ratio, reverse=True)
    
    total_value = 0 # Total value we can achieve
    for item in items:
        if capacity >= item.weight:
        # If the item can be fully added, add it and decrease capacity
            capacity -= item.weight
            total_value += item.value
        else:
            # If only part of the item can be added, add the fraction
            total_value += item.ratio * capacity
            break # Knapsack is full return total_value
    return total_value

# User input for items and knapsack capacity
try:
    n = int(input("Enter number of items: "))
    items = []

    for i in range(n):
        value = float(input(f"Enter value of item {i + 1}: "))
        weight = float(input(f"Enter weight of item {i + 1}: "))
        items.append(Item(value, weight))

    capacity = float(input("Enter knapsack capacity: "))
    # Calculate maximum value
    max_value = fractional_knapsack(capacity, items)
    print(f"Maximum value in the knapsack: {max_value}")
except ValueError:
    print("Invalid input! Please enter numeric values for item weights, values, and capacity.")